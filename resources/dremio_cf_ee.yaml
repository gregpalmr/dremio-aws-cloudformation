---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Dremio Data Lake Engine Deployment.'
Parameters:
  keyName:
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
    ConstraintDescription: Must select an existing EC2 KeyPair
    Description: "AWS key pair to use to SSH to the VMs. SSH username for the VMs are centos (has sudo privilege). SSH into machines for changing configuration, reviewing logs, etc."
  clusterSize:
    Type: String
    Description: "The type and number of machines are chosen based on the size selected."
    AllowedValues:
      - "Single-Node--0-executors"
      - "X-Small--1-executor"
      - "Small--5-executors"
      - "Medium--10-executors"
      - "Large--25-executors"
      - "X-Large--50-executors"
    Default: "Small--5-executors"
  useVPC:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to deploy the cluster into."
  useSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to deploy the cluster into. Must be in the selected VPC."
  securityGroupInboundSourceCidr:
    Type: String
    Description: "The CIDR that represents that ip address range that can commicate with the Dremio daemons via TCP ports. Default is 0.0.0.0/0"
  dremioDownloadURL:
    Type: String
    Description: "S3, HTTP or HTTPS URL to a Dremio RPM. Leave empty to install the latest Dremio CE release."
    Default: "https://download.dremio.com/community-server/dremio-community-LATEST.noarch.rpm"
  dremioS3BucketName:
    Type: String
    Description: "An S3 bucket that Dremio can use to store reflections and temporary files."
    Default: ""
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Dremio Cluster
        Parameters:
          - coordinatorInstanceType
          - coordinatorCount
          - executorInstanceType
          - executorCount
          - clusterSize
          - useVPC
          - useSubnet
          - dremioS3BucketName
          - dremioDownloadURL
      -
        Label:
          default: AWS resource configuration
        Parameters:
          - keyName
    ParameterLabels:
      keyName:
        default : "AWS keypair"
      clusterSize:
        default: "Cluster size"
      useSubnet:
        default: "Deploy to Subnet"
      securityGroupInboundSourceCidr:
        default: "0.0.0.0/0"
      useVPC:
        default: "Deploy to VPC"
      dremioDownloadURL:
        default: "Dremio download URL"
Mappings:
  Custom:
    Variables:
      URL: https://download.dremio.com/community-server/dremio-community-LATEST.noarch.rpm
  ClusterSizes:
    Single-Node--0-executors:
      coordinatorInstanceType: r5d.4xlarge
      coordinatorDiskSize: 50
      coordinatorMaxMemory: 122880
      executorInstanceType: r5d.4xlarge
      executorCount: 0
      executorDiskSize: 50
      executorMaxMemory: 122880
    X-Small--1-executor:
      coordinatorInstanceType: m5.2xlarge
      coordinatorDiskSize: 50
      coordinatorMaxMemory: 28672
      executorInstanceType: r5d.4xlarge
      executorCount: 1
      executorDiskSize: 50
      executorMaxMemory: 122880
    Small--5-executors:
      coordinatorInstanceType: m5.2xlarge
      coordinatorDiskSize: 50
      coordinatorMaxMemory: 28672
      executorInstanceType: r5d.4xlarge
      executorCount: 5
      executorDiskSize: 50
      executorMaxMemory: 122880
    Medium--10-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 10
      executorDiskSize: 100
      executorMaxMemory: 122880
    Large--25-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 25
      executorDiskSize: 100
      executorMaxMemory: 122880
    X-Large--50-executors:
      coordinatorInstanceType: m5.4xlarge
      coordinatorDiskSize: 100
      coordinatorMaxMemory: 61440
      executorInstanceType: r5d.4xlarge
      executorCount: 50
      executorDiskSize: 100
      executorMaxMemory: 122880
  RegionMap:
    # Centos 7 Images
    us-east-1: # N Virginia
      AMI: ami-02eac2c0129f6376b
    us-east-2: # Ohio
      AMI: ami-0f2b4fc905b0bd1f1
    us-west-1: # California
      AMI: ami-074e2d6769f445be5
    us-west-2: # Oregon
      AMI: ami-01ed306a12b7d1c96
    ca-central-1: # Québec
      AMI: ami-033e6106180a626d0
    eu-central-1: # Frankfurt
      AMI: ami-04cf43aca3e6f3de3
    eu-west-1: # Ireland
      AMI: ami-0ff760d16d9497662
    eu-west-2: # London
      AMI: ami-0eab3a90fc693af19
    ap-southeast-1: # Singapore
      AMI: ami-0b4dd9d65556cac22
    ap-southeast-2: # Sydney
      AMI: ami-08bd00d7713a39e7d
    ap-south-1 : # Mumbai
      AMI: ami-02e60be79e78fef21
    ap-northeast-1: # Tokyo
      AMI: ami-045f38c93733dd48d
    ap-northeast-2: # Seoul
      AMI: ami-06cf2a72dadf92410
    sa-east-1: # São Paulo
      AMI: ami-0b8d86d4bf91850af
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
Conditions:
  CreateVPC: !Equals [!Ref useSubnet, ""]
Resources:
  DremioIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", ["DremioIAMPolicy", !Ref "AWS::StackName"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowDremioToSignalResources
            Effect: Allow
            Action:
              - cloudformation:SignalResource
            Resource: "*"
          -
            Sid: AllowDremioToDescribeInstances
            Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
          -
            Sid: AllowDremioToGetS3BucketLocations
            Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
              - s3:HeadBucket
            Resource: "*"
          -
            Sid: AllowDremioToReadWriteToS3Buckets
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: 
              - !Join [ "", [ 'arn:aws:s3:::', !Ref dremioS3BucketName       ] ]
              - !Join [ "", [ 'arn:aws:s3:::', !Ref dremioS3BucketName, '/*' ] ]

  DremioIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", ["DremioIAMRole", !Ref "AWS::StackName"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref DremioIAMPolicy
  DremioInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ["-", ["InstanceProfileName", !Ref "AWS::StackName"]]
      Path: /
      Roles: 
        - !Ref DremioIAMRole
  VPC:
    Condition: CreateVPC
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "net"]]

  PublicSubnet:
    Condition: CreateVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, Public, CIDR]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]
      - Key: Network
        Value: Public

  InternetGateway:
    Condition: CreateVPC
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "ig"]]

  VPCGatewayAttachment:
    Condition: CreateVPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Condition: CreateVPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public"]]

  PublicSubnetRouteTableAssociation:
    Condition: CreateVPC
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicRoute:
    Condition: CreateVPC
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DremioSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Dremio Access"
      VpcId: !If [CreateVPC, !Ref VPC, !Ref useVPC]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '19047'
        ToPort: '19047'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '31010'
        ToPort: '31010'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref securityGroupInboundSourceCidr
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  AvailabilityWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  AvailabilityWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DremioMaster
    Properties:
      Handle: !Ref "AvailabilityWaitHandle"
      Timeout: "600"

  DremioSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DremioSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref DremioSecurityGroup

  DremioMaster:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "DremioMaster"]]
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !Ref keyName
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorInstanceType]
      IamInstanceProfile: !Ref DremioInstanceProfile
      NetworkInterfaces:
        - DeleteOnTermination: "true"
          AssociatePublicIpAddress: "true"
          DeviceIndex: 0
          SubnetId: !If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]
          GroupSet: [!Ref DremioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x

            # TODO: Setup AWS Cloudwatch - Ref: https://github.com/rymurr/dremio-cloudwatch-exporter
            # The following command logs all stdout and stderr to a log file
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            statusFile=/tmp/statusfile

            DREMIO_HOME=/opt/dremio
            DREMIO_CONFIG_FILE=/etc/dremio/dremio.conf
            DREMIO_ENV_FILE=/etc/dremio/dremio-env
            DREMIO_CORE_SITE_FILE=/etc/dremio/core-site.xml

            if [ ! -d /opt/dremio ]; then

              # install OpenJDK 1.8 and the AWS CLI
              yum -y install java-1.8.0-openjdk-devel awscli

              url=${dremioDownloadURL}
              [ -z $url ] && url=${DOWNLOAD_URL}

              # Install Dremio RPM
              if [[ $url == *s3:* ]] || [[ $url == *S3:* ]]; then
                aws s3 --region ${AWS::Region} cp $url .
                yum -y install $(basename $url)
              elif [[ $url == *http* ]] || [[ $url == *HTTP* ]]; then
                yum -y install $url
              else
                errmsg=" ERROR - Parameter \"dremioDownloadURL\" not specified as either an s3:// or http:// URI. Specified as: $url "
                echo " $errmsg"
                echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$errmsg\" }" > $statusFile
                exit 1
              fi

              if [ $? != 0 ]; then
                echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"Unable to download Dremio\" }" > $statusFile
                #curl -T $statusFile '${AvailabilityWaitHandle}'
                aws cloudformation --region ${AWS::Region} signal-resource --stack-name ${AWS::StackName} --logical-resource-id AvailabilityWaitCondition --unique-id ${AWS::StackName} --status FAILURE
                exit 1
              fi
            fi

            # If this is a single node cluster, make the coordinator node also an executor node
            if [ ${EXECUTOR_COUNT} == 0 ]; then
              sed -i -e "s/executor.enabled: false/executor.enabled: true/" $DREMIO_CONFIG_FILE
            else
              sed -i -e "s/executor.enabled: true/executor.enabled: false/" $DREMIO_CONFIG_FILE
            fi

            sed -i -e "s/#DREMIO_MAX_MEMORY_SIZE_MB=/DREMIO_MAX_MEMORY_SIZE_MB=${MEMORY_SIZE}/" \
                $DREMIO_ENV_FILE
            echo 'DREMIO_JAVA_SERVER_EXTRA_OPTS="-XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:MaxGCPauseMillis=500 -XX:InitiatingHeapOccupancyPercent=25"' >>  \
                $DREMIO_ENV_FILE

            # Set dist configuration in dremio.conf
            sed -i -e "/dist:/c\  dist: \"dremioS3:///${DREMIO_S3_BUCKETNAME}/dremio/dist/\${AWS::StackName}\"" $DREMIO_CONFIG_FILE

            # Set the results: file location in dremio.conf
            sed -i -e "/dist:/a\  results: \"pdfs:///var/lib/dremio/results\"" $DREMIO_CONFIG_FILE
            mkdir -p /var/lib/dremio/results && chown -R dremio:dremio /var/lib/dremio/results

            # Setup core-site.xml file to configure S3 storage for Dremio
            cat <<EOF > $DREMIO_CORE_SITE_FILE
            <?xml version="1.0"?>
            <configuration>
            <property>
               <name>fs.dremioS3.impl</name>
               <description>The FileSystem implementation. Must be set to com.dremio.plugins.s3.store.S3FileSystem</description>
               <value>com.dremio.plugins.s3.store.S3FileSystem</value>
            </property>
            <property>
               <name>fs.s3a.aws.credentials.provider</name>
               <description>The credential provider type.</description>
               <value>com.amazonaws.auth.InstanceProfileCredentialsProvider</value>
            </property>

            EOF

            # Check if the target bucket is encyrpted, if so, add the entry in the core-site.xml file
            result=$(aws s3api --region ${AWS::Region} get-bucket-encryption --bucket ${DREMIO_S3_BUCKETNAME})
            if [[ "$result" == *SSEAlgorithm* ]]; then

              cat <<EOF >> $DREMIO_CORE_SITE_FILE

              <property>
               <name>fs.s3a.connection.ssl.enabled</name>
               <value>true</value>
              </property>
              <property>
                <name>fs.s3a.server-side-encryption-algorithm</name>
                <value>AES256</value>
              </property>
              <property>
                <name>fs.s3a.endpoint</name>
                <value>s3-${AWS::Region}.amazonaws.com</value>
              </property>

            EOF
            fi 

            echo "</configuration>" >> $DREMIO_CORE_SITE_FILE

            # Add the hostnames of all the EC2 instances in this Dremio cluster into the /etc/hosts file
            sleep 30

            instance_ids=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag-key,Values=aws:cloudformation:stack-name" "Name=tag-value,Values=${AWS::StackName}" --output=text | tr '\n' ' ')

            echo "" >> /etc/hosts
            echo "# Dremio cluster hostnames" >> /etc/hosts

            for next_instance_id in $instance_ids
            do
              IP_ADDRESS=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateIpAddress' --instance-ids $next_instance_id --output=text)
              FQDN=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateDnsName' --instance-ids $next_instance_id --output=text)
              echo "$IP_ADDRESS     $FQDN" >> /etc/hosts
            done

            # Generate a self-signed certificate 
            keytool -genkey -keyalg RSA -alias selfsigned -keystore /etc/dremio/keystore.jks -keypass changeme -storepass changeme -validity 360 -keysize 2048 -dname "CN=`hostname -f`, OU=Dremio, L=Santa Clara, ST=CA, C=US"
            chown dremio:dremio /etc/dremio/keystore.jks && chmod 0440 /etc/dremio/keystore.jks

            # Setup the /etc/dremio/dremio.conf to reference self-signed certificate
            cat <<EOF >> /etc/dremio/dremio.conf
            // dremio.conf entry for TRUSTED_SSL mode with a self-signed certificate**
            javax.net.ssl {
                trustStore: "/etc/dremio/keystore.jks",
                trustStorePassword: "changeme"
            }
            EOF

            # Setup Dremio Webserver SSL using above self-signed certificate
            sed -i -e "/coordinator.enabled/a\  coordinator.web.ssl.enabled: true" $DREMIO_CONFIG_FILE
            sed -i -e "/coordinator.web.ssl.enabled/a\  coordinator.web.ssl.auto-certificate.enabled: true" $DREMIO_CONFIG_FILE
            sed -i -e "/coordinator.web.ssl.auto-certificate/a\  coordinator.web.port: 19047" $DREMIO_CONFIG_FILE

            # Start the Dremio server process
            cp $DREMIO_HOME/share/dremio/dremio.service /etc/systemd/system
            systemctl daemon-reload
            systemctl start dremio
            systemctl enable dremio

            until curl -Iks https://localhost:19047; do
              echo waiting for website availability
              sleep 2
            done
            echo "{ \"Status\" : \"SUCCESS\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Ready\", \"Reason\" : \"Website Available\" }" > $statusFile
            #curl -T $statusFile '${AvailabilityWaitHandle}'
            aws cloudformation --region ${AWS::Region} signal-resource --stack-name ${AWS::StackName} --logical-resource-id AvailabilityWaitCondition --unique-id ${AWS::StackName} --status SUCCESS
          - DOWNLOAD_URL: !FindInMap [ Custom, Variables, "URL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, coordinatorMaxMemory]
            DREMIO_S3_BUCKETNAME: !Ref dremioS3BucketName
            EXECUTOR_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]

  DremioExecutorLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DremioMaster
    Properties:
      AssociatePublicIpAddress: true
      #EbsOptimized: true
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      InstanceMonitoring: true
      InstanceType: !FindInMap [ClusterSizes, !Ref clusterSize, executorInstanceType]
      IamInstanceProfile: !Ref DremioInstanceProfile
      KeyName: !Ref keyName
      SecurityGroups: [!Ref DremioSecurityGroup]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorDiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x

            # The following command logs all stdout and stderr to a log file
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            DREMIO_HOME=/opt/dremio
            DREMIO_CONFIG_FILE=/etc/dremio/dremio.conf
            DREMIO_ENV_FILE=/etc/dremio/dremio-env
            DREMIO_CORE_SITE_FILE=/etc/dremio/core-site.xml

            statusFile=/tmp/statusfile

            if [ ! -d /opt/dremio ]; then

              # install OpenJDK 1.8 and the AWS CLI
              yum -y install java-1.8.0-openjdk-devel awscli

              url=${dremioDownloadURL}
              [ -z $url ] && url=${DOWNLOAD_URL}

              # Install Dremio RPM
              if [[ $url == *s3:* ]] || [[ $url == *S3:* ]]; then
                aws s3 --region ${AWS::Region} cp $url .
                yum -y install $(basename $url)
              elif [[ $url == *http* ]] || [[ $url == *HTTP:* ]]; then
                yum -y install $url
              else
                errmsg=" ERROR - Parameter \"dremioDownloadURL\" not specified as either an s3:// or http:// URI. Specified as: $url "
                echo " $errmsg"
                echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"$errmsg\" }" > $statusFile
                exit 1
              fi

              if [ $? != 0 ]; then
                echo "{ \"Status\" : \"FAILURE\", \"UniqueId\" : \"${AWS::StackName}\", \"Data\" : \"Failed\", \"Reason\" : \"Unable to download Dremio\" }" > $statusFile
                #curl -T $statusFile '${AvailabilityWaitHandle}'
                aws cloudformation --region ${AWS::Region} signal-resource --stack-name ${AWS::StackName} --logical-resource-id AvailabilityWaitCondition --unique-id ${AWS::StackName} --status FAILURE
                exit 1
              fi
            fi

            # Setup ephemeral disk for spill - this is based on executors are r5d class machines
            SPILL_DIR=/var/ephemeral/spill
            NVME_SPILL=nvme1n1

            mkdir -p $SPILL_DIR
            file -s /dev/$NVME_SPILL | grep "/dev/$NVME_SPILL: data" && mkfs -t xfs /dev/$NVME_SPILL && \
            UUID=$(blkid | grep $NVME_SPILL | awk -F'"' '{ print $2 }') && \
            echo "UUID=$UUID $SPILL_DIR xfs defaults,nofail  0  2" >> /etc/fstab  && \
            mount -a
            chown dremio:dremio $SPILL_DIR

            # Setup ephemeral disk for C3 - this is based on executors are r5d class machines
            CLOUDCACHE_DIR=/var/ephemeral/cloudcache
            NVME_CLOUDCACHE=nvme2n1

            mkdir -p $CLOUDCACHE_DIR
            file -s /dev/$NVME_CLOUDCACHE | grep "/dev/$NVME_CLOUDCACHE: data" && mkfs -t xfs /dev/$NVME_CLOUDCACHE && \
            UUID=$(blkid | grep $NVME_CLOUDCACHE | awk -F'"' '{ print $2 }') && \
            echo "UUID=$UUID $CLOUDCACHE_DIR xfs defaults,nofail  0  2" >> /etc/fstab  && \
            mount -a
            chown dremio:dremio $CLOUDCACHE_DIR

            sed -i -e "s/coordinator.master.enabled: true/coordinator.master.enabled: false/" \
                -e "s/coordinator.enabled: true/coordinator.enabled: false/" \
                -e "/local:/a \ \ spilling: [\"$SPILL_DIR\"]" \
                $DREMIO_CONFIG_FILE
            sed -i -e "s/#DREMIO_MAX_MEMORY_SIZE_MB=/DREMIO_MAX_MEMORY_SIZE_MB=${MEMORY_SIZE}/" \
                $DREMIO_ENV_FILE
            sed -i -e "s/#DREMIO_MAX_MEMORY_SIZE_MB=/DREMIO_MAX_MEMORY_SIZE_MB=${MEMORY_SIZE}/" \
                $DREMIO_ENV_FILE
            echo 'DREMIO_JAVA_SERVER_EXTRA_OPTS="-XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:MaxGCPauseMillis=500 -XX:InitiatingHeapOccupancyPercent=25"' >>  \
                $DREMIO_ENV_FILE

            # Set dist configuration in dremio.conf
            sed -i -e "/dist:/c\  dist: \"dremioS3:///${DREMIO_S3_BUCKETNAME}/dremio/dist/${AWS::StackName}\"" $DREMIO_CONFIG_FILE

            # Set the results: file location in dremio.conf
            sed -i -e "/dist:/a\  results: \"pdfs:///var/lib/dremio/results\"" $DREMIO_CONFIG_FILE
            mkdir -p /var/lib/dremio/results && chown -R dremio:dremio /var/lib/dremio/results

            # Setup core-site.xml file to configure S3 storage for Dremio
            cat <<EOF > $DREMIO_CORE_SITE_FILE
            <?xml version="1.0"?>
            <configuration>
            <property>
               <name>fs.dremioS3.impl</name>
               <description>The FileSystem implementation. Must be set to com.dremio.plugins.s3.store.S3FileSystem</description>
               <value>com.dremio.plugins.s3.store.S3FileSystem</value>
            </property>
            <property>
               <name>fs.s3a.aws.credentials.provider</name>
               <description>The credential provider type.</description>
               <value>com.amazonaws.auth.InstanceProfileCredentialsProvider</value>
            </property>
            EOF

            # Check if the target bucket is encyrpted, if so, add the entry in the core-site.xml file
            result=$(aws s3api --region ${AWS::Region} get-bucket-encryption --bucket ${DREMIO_S3_BUCKETNAME} )
            if [[ "$result" == *SSEAlgorithm* ]]; then

              cat <<EOF >> $DREMIO_CORE_SITE_FILE

              <property>
               <name>fs.s3a.connection.ssl.enabled</name>
               <value>true</value>
              </property>
              <property>
                <name>fs.s3a.server-side-encryption-algorithm</name>
                <value>AES256</value>
              </property>
              <property>
                <name>fs.s3a.endpoint</name>
                <value>s3-${AWS::Region}.amazonaws.com</value>
              </property>

            EOF
            fi 

            echo "</configuration>" >> $DREMIO_CORE_SITE_FILE

            # Add the hostnames of all the EC2 instances in this Dremio cluster into the /etc/hosts file
            sleep 30

            instance_ids=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag-key,Values=aws:cloudformation:stack-name" "Name=tag-value,Values=${AWS::StackName}" --output=text | tr '\n' ' ')

            echo "" >> /etc/hosts
            echo "# Dremio cluster hostnames" >> /etc/hosts

            for next_instance_id in $instance_ids
            do
              IP_ADDRESS=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateIpAddress' --instance-ids $next_instance_id --output=text)
              FQDN=$(aws ec2 --region ${AWS::Region} describe-instances --query 'Reservations[*].Instances[*].PrivateDnsName' --instance-ids $next_instance_id --output=text)
              echo "$IP_ADDRESS     $FQDN" >> /etc/hosts
            done

            # Add this server's ip address and hostname to /etc/host file
            LOCAL_IP_ADDRESS=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
            LOCAL_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)
            if ! grep -q "$LOCAL_IP_ADDRESS" /etc/hosts; then
              echo $LOCAL_IP_ADDRESS     $LOCAL_HOSTNAME >> /etc/hosts
            fi

            # Generate a self-signed certificate 
            keytool -genkey -keyalg RSA -alias selfsigned -keystore /etc/dremio/keystore.jks -keypass changeme -storepass changeme -validity 360 -keysize 2048 -dname "CN=`hostname -f`, OU=Dremio, L=Santa Clara, ST=CA, C=US"
            chown dremio:dremio /etc/dremio/keystore.jks && chmod 0440 /etc/dremio/keystore.jks

            # Setup the /etc/dremio/dremio.conf to reference self-signed certificate
            cat <<EOF >> /etc/dremio/dremio.conf
            // dremio.conf entry for TRUSTED_SSL mode with a self-signed certificate**
            javax.net.ssl {
                trustStore: "/etc/dremio/keystore.jks",
                trustStorePassword: "changeme"
            }
            EOF

            cat <<EOF >> $DREMIO_CONFIG_FILE
            zookeeper: "${ZK}:2181"
            services.executor.cache.path.db: "$CLOUDCACHE_DIR"
            services.executor.cache.path.fs: ["$CLOUDCACHE_DIR"]
            services.executor.cache.pctquota.db: 10
            services.executor.cache.pctquota.fs: [100]
            EOF

            # Start the Dremio server process
            cp $DREMIO_HOME/share/dremio/dremio.service /etc/systemd/system
            systemctl daemon-reload
            systemctl start dremio
            systemctl enable dremio
          - ZK: !GetAtt DremioMaster.PrivateIp
            DOWNLOAD_URL: !FindInMap [ Custom, Variables, "URL"]
            MEMORY_SIZE: !FindInMap [ClusterSizes, !Ref clusterSize, executorMaxMemory]
            DREMIO_S3_BUCKETNAME: !Ref dremioS3BucketName
            EXECUTOR_COUNT: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]

  DremioExecutorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: DremioExecutorLC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", DremioExecutor]]
          PropagateAtLaunch: true
          ResourceType: "auto-scaling-group"
          ResourceId: !Ref "AWS::StackName"
      LaunchConfigurationName: !Ref DremioExecutorLC
      VPCZoneIdentifier: [!If [CreateVPC, !Ref PublicSubnet, !Ref useSubnet]]
      DesiredCapacity: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]
      MaxSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]
      MinSize: !FindInMap [ClusterSizes, !Ref clusterSize, executorCount]

Outputs:
  DremioUI:
    Description: Dremio UI.
    Value: !Join [ "", ["https://", !GetAtt DremioMaster.PublicIp, ":19047"]]
